from flask import Flask, request, jsonify
from ParlAI.parlai.core.agents import create_agent
from ParlAI.parlai.core.worlds import create_task
from ParlAI.parlai.utils.strings import colorize
import ParlAI.parlai.utils.logging as logging
from ParlAI.parlai.utils.world_logging import WorldLogger
from ParlAI.parlai.agents.local_human.local_human import LocalHumanAgent
import json

# 'task' : 'interactive' : interactive task prints persona as empty (because it dosent have)
# In blended skill talk we have personas for both the agents.

opt = {'init_opt': None, 'allow_missing_init_opts': False, 
       'task': 'blended_skill_talk', 
       'download_path': None, 'loglevel': 'info', 
       'datatype': 'train', 'image_mode': 'raw', 'hide_labels': False, 'multitask_weights': [1], 'batchsize': 1, 'dynamic_batching': None, 'verbose': False, 'is_debug': False, 
       'datapath': '/datadrive/ankur/ParlAI/data', 
       'model': None, 
       'model_file': '/datadrive/ankur/ParlAI/data/models/blenderbot2/blenderbot2_400M/model', 
       'init_model': None, 'dict_class': 'parlai.core.dict:DictionaryAgent', 'display_examples': False, 'display_prettify': False, 'display_add_fields': '', 
       'interactive_task': True, "display_partner_persona" : True, 'outfile': '', 'save_format': 'conversations', 'local_human_candidates_file': None, 'single_turn': False, 'log_keep_fields': 'all', 'image_size': 256, 'image_cropsize': 224, 'candidates': 'inline', 'eval_candidates': 'inline', 'interactive_candidates': 'fixed', 'repeat_blocking_heuristic': True, 'fixed_candidates_path': None, 'fixed_candidate_vecs': 'reuse', 'encode_candidate_vecs': True, 'encode_candidate_vecs_batchsize': 256, 'train_predict': False, 'cap_num_predictions': 100, 'ignore_bad_candidates': False, 'rank_top_k': -1, 'return_cand_scores': False, 'use_memories': True, 'wrap_memory_encoder': False, 'memory_attention': 'sqrt', 'normalize_sent_emb': False, 'share_encoders': True, 'learn_embeddings': True, 'data_parallel': False, 'reduction_type': 'mean', 'polyencoder_type': 'codes', 'poly_n_codes': 64, 'poly_attention_type': 'basic', 'poly_attention_num_heads': 4, 'codes_attention_type': 'basic', 'codes_attention_num_heads': 4, 'embedding_size': 300, 'n_layers': 2, 'ffn_size': 300, 'dropout': 0.0, 'attention_dropout': 0.0, 'relu_dropout': 0.0, 'n_heads': 2, 'learn_positional_embeddings': False, 'embeddings_scale': True, 'n_positions': None, 'n_segments': 0, 'variant': 'aiayn', 'activation': 'relu', 'output_scaling': 1.0, 'share_word_embeddings': True, 'n_encoder_layers': -1, 'n_decoder_layers': -1, 'model_parallel': False, 'generation_model': 'bart', 'query_model': 'bert', 'rag_model_type': 'sequence', 'thorough': False, 'n_extra_positions': 0, 'gold_knowledge_passage_key': 'checked_sentence', 'gold_knowledge_title_key': 'title', 'rag_retriever_query': 'full_history', 'rag_retriever_type': 'dpr', 'retriever_debug_index': None, 'n_docs': 5, 'min_doc_token_length': 64, 'max_doc_token_length': 256, 'rag_query_truncate': 512, 'print_docs': False, 'path_to_index': 'zoo:hallucination/wiki_index_compressed/compressed_pq', 'path_to_dense_embeddings': None, 'dpr_model_file': 'zoo:hallucination/multiset_dpr/hf_bert_base.cp', 'path_to_dpr_passages': 'zoo:hallucination/wiki_passages/psgs_w100.tsv', 'retriever_embedding_size': 768, 'tfidf_max_doc_paragraphs': -1, 'tfidf_model_path': 'zoo:wikipedia_full/tfidf_retriever/model', 'dpr_num_docs': 25, 'poly_score_initial_lambda': 0.5, 'polyencoder_init_model': 'wikito', 'poly_faiss_model_file': None, 'regret': False, 'regret_intermediate_maxlen': 32, 'regret_model_file': None, 'indexer_type': 'compressed', 'indexer_buffer_size': 65536, 'compressed_indexer_factory': 'IVF4096_HNSW128,PQ128', 'compressed_indexer_gpu_train': False, 'compressed_indexer_nprobe': 64, 'hnsw_indexer_store_n': 128, 'hnsw_ef_search': 128, 'hnsw_ef_construction': 200, 'rag_turn_n_turns': 2, 'rag_turn_marginalize': 'doc_then_turn', 'rag_turn_discount_factor': 1.0, 'beam_size': 1, 'beam_min_length': 1, 'beam_context_block_ngram': -1, 'beam_block_ngram': -1, 'beam_block_full_context': True, 'beam_length_penalty': 0.65, 'skip_generation': False, 'inference': 'greedy', 'topk': 10, 'topp': 0.9, 'beam_delay': 30, 'beam_block_list_filename': None, 'temperature': 1.0, 'compute_tokenized_bleu': False, 'interactive_mode': True, 'embedding_type': 'random', 'embedding_projection': 'random', 'fp16': False, 'fp16_impl': 'safe', 'force_fp16_tokens': False, 'optimizer': 'adamax', 'learningrate': 0.0001, 'gradient_clip': 0.1, 'adam_eps': 1e-08, 'adafactor_eps': (1e-30, 0.001), 'momentum': 0, 'nesterov': True, 'nus': (0.7,), 'betas': (0.9, 0.999), 'weight_decay': None, 'rank_candidates': False, 'truncate': 1024, 'text_truncate': None, 'label_truncate': None, 'history_reversed': False, 'history_size': -1, 'person_tokens': False, 'split_lines': False, 'use_reply': 'label', 'add_p1_after_newln': False, 'delimiter': '\n', 'history_add_global_end_token': None, 'special_tok_lst': None, 'gpu': -1, 'no_cuda': False, 'dict_file': None, 'dict_initpath': None, 'dict_language': 'english', 'dict_max_ngram_size': -1, 'dict_minfreq': 0, 'dict_maxtokens': -1, 'dict_nulltoken': '__null__', 'dict_starttoken': '__start__', 'dict_endtoken': '__end__', 'dict_unktoken': '__unk__', 'dict_tokenizer': 're', 'dict_lower': False, 'bpe_debug': False, 'dict_textfields': 'text,labels', 'bpe_vocab': None, 'bpe_merge': None, 'bpe_add_prefix_space': None, 'bpe_dropout': None, 'lr_scheduler': 'reduceonplateau', 'lr_scheduler_patience': 3, 'lr_scheduler_decay': 0.5, 'invsqrt_lr_decay_gamma': -1, 'warmup_updates': -1, 'warmup_rate': 0.0001, 'update_freq': 1, 't5_model_arch': 't5-base', 't5_model_parallel': False, 't5_dropout': 0.0, 't5_generation_config': None, 'search_query_generator_model_file': None, 'search_query_generator_inference': 'beam', 'search_query_generator_beam_min_length': 1, 'search_query_generator_beam_size': 1, 'search_query_generator_text_truncate': 512, 'splitted_chunk_length': 256, 'doc_chunk_split_mode': 'word', 'n_ranked_doc_chunks': 1, 'doc_chunks_ranker': 'head', 'search_server': 'https://www.google.com/', 'knowledge_access_method': 'classify', 'memory_key': 'full_text', 'query_generator_key': 'full_text', 'gold_document_key': '__selected-docs__', 'gold_sentence_key': '__selected-sentences__', 'gold_document_titles_key': '__select-docs-titles__', 'insert_gold_docs': False, 'memory_extractor_phrase': 'persona:', 'retriever_ignore_phrase': 'persona:', 'query_generator_ignore_phrase': 'persona:', 'query_generator_model_file': 'zoo:blenderbot2/query_generator/model', 'query_generator_delimiter': '\n', 'query_generator_inference': 'beam', 'query_generator_beam_size': 1, 'query_generator_beam_min_length': 2, 'query_generator_truncate': -1, 'memory_retriever_truncate': -1, 'retriever_delimiter': '\n', 'share_search_and_memory_query_encoder': False, 'memory_reader_model': None, 'memory_doc_title_delimiter': ' / ', 'memory_writer_model': 'bert', 'memory_writer_model_file': 'zoo:hallucination/multiset_dpr/hf_bert_base.cp', 'memory_decoder_key': 'full_text', 'memory_decoder_ignore_phrase': 'persona:', 'memory_decoder_model_file': 'zoo:blenderbot2/memory_decoder/model', 'memory_decoder_delimiter': '\n', 'memory_decoder_beam_size': 3, 'memory_decoder_beam_min_length': 10, 'memory_decoder_truncate': -1, 'memory_decoder_one_line_memories': False, 'parlai_home': '/datadrive/ankur/ParlAI', 'override': {'model_file': '/datadrive/ankur/ParlAI/data/models/blenderbot2/blenderbot2_400M/model', 'search_server': 'https://www.google.com/', 'search_query_generator_inference': 'beam', 'use_memories': True, 'rag_model_type': 'sequence'}, 'starttime': 'Jul28_12-11'}

# {'init_opt': None, 'allow_missing_init_opts': False, 'task': 'blended_skill_talk', 'download_path': None, 'loglevel': 'info', 'datatype': 'train', 'image_mode': 'raw', 'hide_labels': False, 'multitask_weights': [1], 'batchsize': 1, 'dynamic_batching': None, 'verbose': False, 'is_debug': False, 'datapath': '/datadrive/ankur/ParlAI/data', 'model': None, 'model_file': '/datadrive/ankur/ParlAI/data/models/blenderbot2/blenderbot2_400M/model', 'init_model': None, 'dict_class': 'parlai.core.dict:DictionaryAgent', 'display_examples': False, 'display_prettify': False, 'display_add_fields': '', 'interactive_task': True, 'outfile': '', 'save_format': 'conversations', 'local_human_candidates_file': None, 'single_turn': False, 'log_keep_fields': 'all', 'image_size': 256, 'image_cropsize': 224, 'mutators': None, 'candidates': 'inline', 'eval_candidates': 'inline', 'interactive_candidates': 'fixed', 'repeat_blocking_heuristic': True, 'fixed_candidates_path': None, 'fixed_candidate_vecs': 'reuse', 'encode_candidate_vecs': True, 'encode_candidate_vecs_batchsize': 256, 'train_predict': False, 'cap_num_predictions': 100, 'ignore_bad_candidates': False, 'rank_top_k': -1, 'return_cand_scores': False, 'use_memories': True, 'wrap_memory_encoder': False, 'memory_attention': 'sqrt', 'normalize_sent_emb': False, 'share_encoders': True, 'learn_embeddings': True, 'data_parallel': False, 'reduction_type': 'mean', 'polyencoder_type': 'codes', 'poly_n_codes': 64, 'poly_attention_type': 'basic', 'poly_attention_num_heads': 4, 'codes_attention_type': 'basic', 'codes_attention_num_heads': 4, 'embedding_size': 300, 'n_layers': 2, 'ffn_size': 300, 'dropout': 0.0, 'attention_dropout': 0.0, 'relu_dropout': 0.0, 'n_heads': 2, 'learn_positional_embeddings': False, 'embeddings_scale': True, 'n_positions': None, 'n_segments': 0, 'variant': 'aiayn', 'activation': 'relu', 'output_scaling': 1.0, 'share_word_embeddings': True, 'n_encoder_layers': -1, 'n_decoder_layers': -1, 'model_parallel': False, 'generation_model': 'bart', 'query_model': 'bert', 'rag_model_type': 'sequence', 'thorough': False, 'n_extra_positions': 0, 'gold_knowledge_passage_key': 'checked_sentence', 'gold_knowledge_title_key': 'title', 'rag_retriever_query': 'full_history', 'rag_retriever_type': 'dpr', 'retriever_debug_index': None, 'n_docs': 5, 'min_doc_token_length': 64, 'max_doc_token_length': 256, 'rag_query_truncate': 512, 'print_docs': False, 'path_to_index': 'zoo:hallucination/wiki_index_compressed/compressed_pq', 'path_to_dense_embeddings': None, 'dpr_model_file': 'zoo:hallucination/multiset_dpr/hf_bert_base.cp', 'path_to_dpr_passages': 'zoo:hallucination/wiki_passages/psgs_w100.tsv', 'retriever_embedding_size': 768, 'tfidf_max_doc_paragraphs': -1, 'tfidf_model_path': 'zoo:wikipedia_full/tfidf_retriever/model', 'dpr_num_docs': 25, 'poly_score_initial_lambda': 0.5, 'polyencoder_init_model': 'wikito', 'poly_faiss_model_file': None, 'regret': False, 'regret_intermediate_maxlen': 32, 'regret_model_file': None, 'indexer_type': 'compressed', 'indexer_buffer_size': 65536, 'compressed_indexer_factory': 'IVF4096_HNSW128,PQ128', 'compressed_indexer_gpu_train': False, 'compressed_indexer_nprobe': 64, 'hnsw_indexer_store_n': 128, 'hnsw_ef_search': 128, 'hnsw_ef_construction': 200, 'rag_turn_n_turns': 2, 'rag_turn_marginalize': 'doc_then_turn', 'rag_turn_discount_factor': 1.0, 'beam_size': 1, 'beam_min_length': 1, 'beam_context_block_ngram': -1, 'beam_block_ngram': -1, 'beam_block_full_context': True, 'beam_length_penalty': 0.65, 'skip_generation': False, 'inference': 'greedy', 'topk': 10, 'topp': 0.9, 'beam_delay': 30, 'beam_block_list_filename': None, 'temperature': 1.0, 'compute_tokenized_bleu': False, 'interactive_mode': True, 'embedding_type': 'random', 'embedding_projection': 'random', 'fp16': False, 'fp16_impl': 'safe', 'force_fp16_tokens': False, 'optimizer': 'adamax', 'learningrate': 0.0001, 'gradient_clip': 0.1, 'adam_eps': 1e-08, 'adafactor_eps': (1e-30, 0.001), 'momentum': 0, 'nesterov': True, 'nus': (0.7,), 'betas': (0.9, 0.999), 'weight_decay': None, 'rank_candidates': False, 'truncate': 1024, 'text_truncate': None, 'label_truncate': None, 'history_reversed': False, 'history_size': -1, 'person_tokens': False, 'split_lines': False, 'use_reply': 'label', 'add_p1_after_newln': False, 'delimiter': '\n', 'history_add_global_end_token': None, 'special_tok_lst': None, 'gpu': -1, 'no_cuda': False, 'dict_file': None, 'dict_initpath': None, 'dict_language': 'english', 'dict_max_ngram_size': -1, 'dict_minfreq': 0, 'dict_maxtokens': -1, 'dict_nulltoken': '__null__', 'dict_starttoken': '__start__', 'dict_endtoken': '__end__', 'dict_unktoken': '__unk__', 'dict_tokenizer': 're', 'dict_lower': False, 'bpe_debug': False, 'dict_textfields': 'text,labels', 'bpe_vocab': None, 'bpe_merge': None, 'bpe_add_prefix_space': None, 'bpe_dropout': None, 'lr_scheduler': 'reduceonplateau', 'lr_scheduler_patience': 3, 'lr_scheduler_decay': 0.5, 'invsqrt_lr_decay_gamma': -1, 'warmup_updates': -1, 'warmup_rate': 0.0001, 'update_freq': 1, 't5_model_arch': 't5-base', 't5_model_parallel': False, 't5_dropout': 0.0, 't5_generation_config': None, 'search_query_generator_model_file': None, 'search_query_generator_inference': 'beam', 'search_query_generator_beam_min_length': 1, 'search_query_generator_beam_size': 1, 'search_query_generator_text_truncate': 512, 'splitted_chunk_length': 256, 'doc_chunk_split_mode': 'word', 'n_ranked_doc_chunks': 1, 'doc_chunks_ranker': 'head', 'search_server': 'https://www.google.com/', 'knowledge_access_method': 'classify', 'memory_key': 'full_text', 'query_generator_key': 'full_text', 'gold_document_key': '__selected-docs__', 'gold_sentence_key': '__selected-sentences__', 'gold_document_titles_key': '__select-docs-titles__', 'insert_gold_docs': False, 'memory_extractor_phrase': 'persona:', 'retriever_ignore_phrase': 'persona:', 'query_generator_ignore_phrase': 'persona:', 'query_generator_model_file': 'zoo:blenderbot2/query_generator/model', 'query_generator_delimiter': '\n', 'query_generator_inference': 'beam', 'query_generator_beam_size': 1, 'query_generator_beam_min_length': 2, 'query_generator_truncate': -1, 'memory_retriever_truncate': -1, 'retriever_delimiter': '\n', 'share_search_and_memory_query_encoder': False, 'memory_reader_model': None, 'memory_doc_title_delimiter': ' / ', 'memory_writer_model': 'bert', 'memory_writer_model_file': 'zoo:hallucination/multiset_dpr/hf_bert_base.cp', 'memory_decoder_key': 'full_text', 'memory_decoder_ignore_phrase': 'persona:', 'memory_decoder_model_file': 'zoo:blenderbot2/memory_decoder/model', 'memory_decoder_delimiter': '\n', 'memory_decoder_beam_size': 3, 'memory_decoder_beam_min_length': 10, 'memory_decoder_truncate': -1, 'memory_decoder_one_line_memories': False, 'display_partner_persona': True, 'include_personas': True, 'include_initial_utterances': False, 'safe_personas_only': True, 'parlai_home': '/datadrive/ankur/ParlAI', 'override': {'model_file': '/datadrive/ankur/ParlAI/data/models/blenderbot2/blenderbot2_400M/model', 'search_server': 'https://www.google.com/', 'search_query_generator_inference': 'beam', 'use_memories': True, 'rag_model_type': 'sequence', 'task': 'blended_skill_talk'}, 'starttime': 'Aug07_12-46'}

#Create Model Agent, Human Agent and the World
agent = create_agent(opt, requireModelExists=True)
human_agent = LocalHumanAgent(opt)
world = create_task(opt, [human_agent, agent])


app = Flask(__name__)
# run_with_ngrok(app)

@app.route("/", methods = ['GET'])
def home():
	html_content = '''<h1>Hello World!!</h1>
                      <h2>Nothing else here. Move to /parley_text</h2>'''
	return html_content


@app.route('/parley_text/', methods=['GET', 'POST'])
def welcome():
    # if request.method == 'GET':
    #     return "Get Request"
    if request.method == 'POST':
        response_text = request.values.get("Response")
        model_persona = request.values.get("model_persona")
        restart = request.values.get("Restart")
        if not world.epoch_done():
            if restart == "False":
                world.parley(response_text, model_persona)
                teacher, response = world.get_acts()
                # act_world = world.get_acts()
                # teacher = act_world[0]
                # response = act_world[1]
                print("RESPONSE: ", response)
                return jsonify(response.json_safe_payload())
                # return response.get('text', 'No response') + "--delimeter--" + response.get('search_queries', 'No search query')
            elif restart == "True":
                world.parley("[DONE]", model_persona)
                return "Chat Reset"
        else:
            return "Not a Post Request"


if __name__ == '__main__':
    # model_agent, human_agent = create_model_and_human_agents(opt)
    # world = create_world(model_agent, human_agent)
    app.run(host='0.0.0.0', debug = False, port=5000)
    # app.run()